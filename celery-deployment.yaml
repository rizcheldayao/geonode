apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.13.0 (84fa826)
    org.geonode.component: celery
    org.geonode.instance.name: geonode
  creationTimestamp: null
  labels:
    io.kompose.service: celery
  name: celery
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: celery
    spec:
      containers:
      - args:
        - celery
        - worker
        - --app=geonode.celery_app:app
        - -B
        - -l
        - INFO
        env:
        - name: ALLOWED_HOSTS
          value: '[''django'',]'
        - name: ASYNC_SIGNALS
          value: "False"
        - name: BROKER_URL
          value: amqp://guest:guest@rabbitmq:5672
        - name: CELERY_CMD
          value: celery worker --app=geonode.celery_app:app --broker=amqp://guest:guest@rabbitmq:5672/
            -B -l INFO
        - name: C_FORCE_ROOT
          value: "1"
        - name: DATABASE_URL
          value: postgres://postgres:postgres@db:5432/postgres
        - name: DEFAULT_BACKEND_DATASTORE
          value: datastore
        - name: DJANGO_SETTINGS_MODULE
          value: geonode.settings
        - name: DOCKER_ENV
          value: production
        - name: GEONODE_DATABASE
          value: geonode
        - name: GEONODE_DATABASE_PASSWORD
          value: geonode
        - name: GEONODE_GEODATABASE
          value: geonode_data
        - name: GEONODE_GEODATABASE_PASSWORD
          value: geonode_data
        - name: GEONODE_INSTANCE_NAME
          value: geonode
        - name: GEONODE_LB_HOST_IP
        - name: GEONODE_LB_PORT
        - name: GEOSERVER_LOCATION
          value: http://geonode/geoserver/
        - name: GEOSERVER_PUBLIC_LOCATION
          value: http://geonode/geoserver/
        - name: IS_CELERY
          value: "true"
        - name: SITEURL
          value: http://geonode/
        image: geonode/geonode:latest
        name: celery4geonode
        resources: {}
        stdin: true
        volumeMounts:
        - mountPath: /var/run/docker.sock
          name: celery-claim0
      restartPolicy: Always
      volumes:
      - name: celery-claim0
        persistentVolumeClaim:
          claimName: celery-claim0
status: {}
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: celery-claim0
  labels:
    type: local
spec:
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/tmp/celery-claim0"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: celery-claim0
  name: celery-claim0
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

